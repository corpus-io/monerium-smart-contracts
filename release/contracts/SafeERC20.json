{
  "contractName": "SafeERC20",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"project:/contracts/token/ERC20/ERC20Basic.sol\":{\"keccak256\":\"0x54484484f83afe433e6bc50c0003d99c5e877747a783581500a25df8ce7017dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85c97b9279681e06af93f38223117d3351acbe205ed8a47d33c650149ef09bb2\",\"dweb:/ipfs/QmYAcawJZ5tH9e6Syno9fejaaNdpzXbjtWQUhKZyA86g5d\"]},\"project:/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xa4c3829e43d20517869a6555f80977d4e582ae439b6b7c5013960fb05932f635\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d815f26b889c44a2f1703cb59ddf9a5e426447df50ce91e240bc68f046b99465\",\"dweb:/ipfs/QmUTTNoty755VqS2jvZra7HrumCnRNkLcPRihs7W3s4Vj2\"]}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a83f8b0df0778e5cc57a0db2028434c211e785a075f3de8d0e8815dd71c5363b64736f6c634300080b0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a83f8b0df0778e5cc57a0db2028434c211e785a075f3de8d0e8815dd71c5363b64736f6c634300080b0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "354:173:55:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;354:173:55;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "354:173:55:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ERC20Basic.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n}\n",
  "sourcePath": "/Users/gislik/Code/smart-contracts-private/contracts/token/ERC20/SafeERC20.sol",
  "ast": {
    "absolutePath": "project:/contracts/token/ERC20/SafeERC20.sol",
    "exportedSymbols": {
      "ERC20Basic": [
        6012
      ],
      "SafeERC20": [
        6036
      ]
    },
    "id": 6037,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6014,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:55"
      },
      {
        "absolutePath": "project:/contracts/token/ERC20/ERC20Basic.sol",
        "file": "./ERC20Basic.sol",
        "id": 6015,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6037,
        "sourceUnit": 6013,
        "src": "57:26:55",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "SafeERC20",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 6016,
          "nodeType": "StructuredDocumentation",
          "src": "85:268:55",
          "text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure.\n To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
        },
        "fullyImplemented": true,
        "id": 6036,
        "linearizedBaseContracts": [
          6036
        ],
        "name": "SafeERC20",
        "nameLocation": "362:9:55",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6034,
              "nodeType": "Block",
              "src": "477:48:55",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 6029,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6021,
                            "src": "507:3:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 6030,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6023,
                            "src": "512:6:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 6027,
                            "name": "_token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6019,
                            "src": "491:6:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20Basic_$6012",
                              "typeString": "contract ERC20Basic"
                            }
                          },
                          "id": 6028,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6003,
                          "src": "491:15:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 6031,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "491:28:55",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 6026,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "483:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 6032,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "483:37:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6033,
                  "nodeType": "ExpressionStatement",
                  "src": "483:37:55"
                }
              ]
            },
            "id": 6035,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransfer",
            "nameLocation": "385:12:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6019,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "414:6:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 6035,
                  "src": "403:17:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Basic_$6012",
                    "typeString": "contract ERC20Basic"
                  },
                  "typeName": {
                    "id": 6018,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 6017,
                      "name": "ERC20Basic",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6012,
                      "src": "403:10:55"
                    },
                    "referencedDeclaration": 6012,
                    "src": "403:10:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Basic_$6012",
                      "typeString": "contract ERC20Basic"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6021,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "434:3:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 6035,
                  "src": "426:11:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6020,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "426:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6023,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "451:6:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 6035,
                  "src": "443:14:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6022,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "443:7:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "397:64:55"
            },
            "returnParameters": {
              "id": 6025,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "477:0:55"
            },
            "scope": 6036,
            "src": "376:149:55",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 6037,
        "src": "354:173:55",
        "usedErrors": []
      }
    ],
    "src": "32:496:55"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.11+commit.d7f03943.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.10",
  "updatedAt": "2022-11-29T22:36:59.553Z",
  "devdoc": {
    "details": "Wrappers around ERC20 operations that throw on failure. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
    "kind": "dev",
    "methods": {},
    "title": "SafeERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}